import streamlit as st
import os
import json
import hashlib
from datetime import datetime
import time
import logging
from pathlib import Path
# from functions.api_correcting.pdf_merger import ImageToPDFConverter
from functions.api_correcting.calling_api import call_api, correction_with_image_marking_scheme
import re

# Constants
MAX_FILE_SIZE = 5 * 1024  # 5MB in KB
UPLOAD_DIR = Path("uploads")
DATA_FILE = Path("user_data.json")

# Create necessary directories
UPLOAD_DIR.mkdir(exist_ok=True)

# Test accounts for development
TEST_ACCOUNTS = {
    "test_user_1": {"password": "password1"},
    "test_user_2": {"password": "password2"}
}

try:
    from fpdf import FPDF
except ImportError:
    import subprocess
    import sys
    logging.info("Installing required package: fpdf")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "fpdf", "Pillow"])
    from fpdf import FPDF

def setup_logger(log_dir="logs"):
    if not os.path.exists(log_dir): 
        os.makedirs(log_dir) 
    log_file = os.path.join(log_dir, "app_debug.log") 
    logging.basicConfig( 
        level=logging.INFO,
        format="[%(asctime)s] %(levelname)s @ %(module)s: %(message)s",
        handlers=[
            logging.FileHandler(log_file),
            logging.StreamHandler()
        ]
    )

# Initialize logger
setup_logger()
logging.info("Starting") 

# Initialize storage structure
if not os.path.exists(DATA_FILE): 
    with open(DATA_FILE, "w") as f:
        json.dump({}, f)

def read_user_data():
    """从JSON文件读取用户数据，或返回默认数据"""
    try:
        with open(DATA_FILE, "r") as f:
            data = json.load(f)
            
            # 确保测试账户存在并使用哈希密码
            for test_user, details in TEST_ACCOUNTS.items():
                if test_user not in data:
                    data[test_user] = {
                        "password": details["password"],  # 对于测试账户，保持原始密码
                        "email": f"{test_user}@example.com",
                        "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        "records": []
                    }
            
            return data
    except FileNotFoundError:
        # 返回带有测试账户的默认数据
        default_data = {}
        for test_user, details in TEST_ACCOUNTS.items():
            default_data[test_user] = {
                "password": details["password"],
                "email": f"{test_user}@example.com",
                "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "records": []
            }
        return default_data

def save_user_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

# Replace the create_download_buttons function with a unified approach
def create_download_options(content, prefix="correction_result", files=None):
    """Create unified download options for content in TXT, PDF and Word formats
    
    Args:
        content: 文本内容
        prefix: 文件名前缀
        files: 字典，包含上传的图片文件信息 {'question': {}, 'student_answer': {}, 'marking_scheme': {}}
    """
    # 使用稳定的键名，不依赖于时间戳
    format_key = f"download_format_{prefix}"
    
    # 为了下载按钮创建一个唯一的时间戳
    current_time = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # Create the dropdown menu for download options
    download_option = st.selectbox(
        "Download Format",
        ["Select format...", "Text file (.txt)", "PDF Document (.pdf)", "Word Document (.docx)"],
        key=format_key
    )
    
    # Handle download based on selected option
    if download_option == "Text file (.txt)":
        st.download_button(
            label="Download result",
            data=content.encode('utf-8'),
            file_name=f"{prefix}_{current_time}.txt",
            mime="text/plain",
            key=f"download_txt_{prefix}_{current_time}"
        )
    
    elif download_option == "PDF Document (.pdf)":
        # 使用按钮触发 PDF 生成，避免自动生成导致问题
        if st.button("Generate and Download PDF", key=f"generate_pdf_{prefix}_{current_time}", type="primary"):
            with st.spinner("Generating PDF..."):
                try:
                    # Import PDFMerger and create instance
                    from functions.api_correcting.pdf_merger import PDFMerger
                    pdf_merger = PDFMerger(UPLOAD_DIR)
                    
                    # Generate PDF and provide download button
                    pdf_filename = f"{prefix}_{current_time}.pdf"
                    output_path = UPLOAD_DIR / st.session_state.current_user / pdf_filename
                    
                    # 确保用户目录存在
                    user_dir = UPLOAD_DIR / st.session_state.current_user
                    user_dir.mkdir(exist_ok=True)
                    
                    # 准备文件供PDF合并器使用 - 简化逻辑，直接传递原始文件路径
                    files_to_include = {}
                    
                    # 添加日志以诊断文件内容
                    logging.info(f"Files dictionary: {str(files)}")
                    
                    if isinstance(files, dict):
                        # 处理单文件和多文件格式
                        for key, file_info in files.items():
                            if isinstance(file_info, dict) and 'saved_path' in file_info:
                                file_path = file_info['saved_path']
                                if os.path.exists(file_path):
                                    # 根据文件类型确定文件标识符
                                    file_type = None
                                    if 'question' in key:
                                        file_type = 'question'
                                    elif 'student_answer' in key or 'answer' in key:
                                        file_type = 'answer'
                                    elif 'marking_scheme' in key or 'marking' in key:
                                        file_type = 'marking'
                                    
                                    if file_type:
                                        # 如果已经有了这个类型的文件，创建一个唯一标识符
                                        if file_type in files_to_include:
                                            file_type = f"{file_type}_{key.split('_')[-1] if '_' in key else '1'}"
                                        files_to_include[file_type] = {'path': file_path}
                                        logging.info(f"Added file for PDF: {file_type} = {file_path}")
                    
                    success, pdf_path = pdf_merger.merge_pdfs(
                        files_to_include,
                        content,
                        "AI Correction Results",
                        output_path
                    )
                    
                    if success and os.path.exists(pdf_path):
                        with open(pdf_path, 'rb') as pdf_file:
                            pdf_bytes = pdf_file.read()
                        
                        # 直接显示下载按钮
                        st.download_button(
                            label="Download PDF",
                            data=pdf_bytes,
                            file_name=pdf_filename,
                            mime="application/pdf",
                            key=f"download_pdf_{prefix}_{current_time}"
                        )
                        
                        # Clean up temporary file
                        try:
                            if os.path.exists(pdf_path):
                                os.remove(pdf_path)
                        except Exception as e:
                            logging.error(f"Error removing temporary PDF file: {str(e)}")
                    else:
                        st.error(f"PDF generation failed. Please try text format instead.")
                        logging.error(f"PDF generation failed. Path: {pdf_path}")
                
                except Exception as e:
                    st.error(f"PDF generation failed: {str(e)}")
                    logging.error(f"PDF generation error: {str(e)}", exc_info=True)
    
    elif download_option == "Word Document (.docx)":
        try:
            # Import python-docx for Word document creation
            try:
                import docx
            except ImportError:
                import subprocess
                import sys
                logging.info("Installing required package: python-docx")
                subprocess.check_call([sys.executable, "-m", "pip", "install", "python-docx"])
                import docx
            
            from docx import Document
            import tempfile
            
            # 创建Word文档
            doc = Document()
            doc.add_heading("AI Correction Results", 0)
            
            # 添加内容
            for para in content.split('\n'):
                if para.strip():
                    doc.add_paragraph(para)
            
            # 保存到临时文件
            with tempfile.NamedTemporaryFile(delete=False, suffix='.docx') as tmp:
                docx_path = tmp.name
                doc.save(docx_path)
                
                # 读取文件内容用于下载
                with open(docx_path, 'rb') as f:
                    docx_data = f.read()
                    
                # 提供下载按钮
                st.download_button(
                    label="Download Word Document",
                    data=docx_data,
                    file_name=f"{prefix}_{current_time}.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    key=f"download_docx_{prefix}_{current_time}"
                )
                
                # 清理临时文件
                try:
                    os.remove(docx_path)
                except:
                    pass
                
        except Exception as e:
            st.error(f"Word document generation failed: {str(e)}")
            logging.error(f"Word document generation error: {str(e)}", exc_info=True)

def file_management_page():
    """File management and history page"""
    st.title("📁 File Management Center")
    
    user_data = read_user_data()
    # Filter out records with empty content
    user_records = [
        record for record in user_data.get(st.session_state.current_user, {}).get('records', [])
        if record.get('content') and record['content'].strip()
    ]
    
    if not user_records:
        st.info("No correction records found.")
        return

    st.subheader("📋 Correction History")
    
    for idx, record in enumerate(reversed(user_records)):
        # 获取时间戳，如果不存在则使用默认值
        timestamp = record.get('timestamp', 'No timestamp')
        
        # 获取设置信息（如果有）
        settings = record.get('settings', {})
        if not settings or not isinstance(settings, dict):
            settings = {}  # 确保settings是一个字典，处理旧记录
            
        strictness = settings.get('strictness_level', '中等')  # 默认值为中等
        language = settings.get('language', 'zh')  # 默认值为中文
        
        # 准备显示的语言信息
        language_display = "Chinese (中文)" if language == "zh" else "English"
        
        # 创建记录标题，包含语言信息
        record_title = f"Record {len(user_records)-idx}: {timestamp}"
        if language != 'zh':
            record_title += f" - {language_display}"
        
        with st.expander(record_title, expanded=False):
            # 显示上传的图片
            if record.get('files'):
                st.write("📎 Uploaded Files:")
                files = list(record['files'].items())
                cols = st.columns(len(files))
                for i, (file_type, file_info) in enumerate(files):
                    with cols[i]:
                        if file_info and isinstance(file_info, dict) and 'saved_path' in file_info:
                            if os.path.exists(file_info['saved_path']):
                                st.write(f"{file_type.title()}: {file_info.get('filename', 'Unknown file')}")
                                try:
                                    st.image(file_info['saved_path'], caption=file_type.title())
                                except Exception:
                                    st.write("(File preview not available)")

            # 显示设置信息（如果有）
            if settings:
                st.write("⚙️ Settings:")
                settings_text = f"Strictness: {strictness}"
                settings_text += f" | Language: {language_display}"
                st.write(settings_text)

            # 显示结果内容
            st.write("🔍 Correction Result:")
            content = record.get('content', 'No content available')
            st.write(content)

            # Replace download buttons with unified download options
            create_download_options(content, f"record_{len(user_records)-idx}", record.get('files'))

    st.info("Please use the AI Correction module to upload files and process them.")

def ai_correction_page():
    """AI correction management page with enhanced UI"""
    if 'ai_correction_step' not in st.session_state:
        st.session_state.ai_correction_step = 1

    # 进度条显示当前在哪一步
    steps = ["Step 1: Upload", "Step 2: Settings", "Step 3: Results"]
    current_step = st.session_state.ai_correction_step - 1
    
    st.markdown(f"""
    <div style="background-color: #f8f9fa; border-radius: 10px; padding: 20px; margin-bottom: 30px;">
        <div style="display: flex; justify-content: space-between; margin-bottom: 15px;">
            <div style="font-weight: bold; color: {"#5cb85c" if current_step >= 0 else "#4a4a4a"}; font-size: 0.9em;">{steps[0]} {" ✓" if current_step > 0 else ""}</div>
            <div style="font-weight: bold; color: {"#5cb85c" if current_step >= 1 else "#4a4a4a"}; font-size: 0.9em;">{steps[1]} {" ✓" if current_step > 1 else ""}</div>
            <div style="font-weight: bold; color: {"#5cb85c" if current_step >= 2 else "#4a4a4a"}; font-size: 0.9em;">{steps[2]}</div>
        </div>
        <div style="height: 6px; background-color: #e9ecef; border-radius: 3px; position: relative;">
            <div style="height: 100%; width: {(current_step + 1) * 33.33}%; background-color: #5cb85c; border-radius: 3px;"></div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    if st.session_state.ai_correction_step == 1:
        st.header("Step 1: Upload Files")
        
        # 添加文件格式提示
        st.markdown("""
        <style>
        .tooltip {
          position: relative;
          display: inline-block;
        }
        .tooltip .tooltiptext {
          visibility: hidden;
          width: 320px;
          background-color: #555;
          color: #fff;
          text-align: left;
          border-radius: 6px;
          padding: 10px;
          position: absolute;
          z-index: 1;
          bottom: 125%; /* 上方显示 */
          left: 50%;
          margin-left: -160px;
          opacity: 0;
          transition: opacity 0.3s;
          font-size: 0.95em;
        }
        .tooltip:hover .tooltiptext {
          visibility: visible;
          opacity: 1;
        }
        </style>
        <div class="tooltip">
          <button style="padding: 6px 18px; border-radius: 5px; border: none; background: #4b8bf4; color: #fff; font-weight: bold; cursor: pointer;">
            File Requirements
          </button>
          <span class="tooltiptext">
            <b>Supported formats:</b> PDF, JPG, JPEG, PNG, JSON<br>
            <b>Maximum file size:</b> 5MB per file<br>
            <b>Images should be clear and readable</b><br>
            <b>Student answer file is required</b>
          </span>
        </div>
        """, unsafe_allow_html=True)
        
        question_files = st.file_uploader("Upload question(s) (optional)", type=["pdf", "jpg", "jpeg", "png"], key="question_file", accept_multiple_files=True)
        student_answer_files = st.file_uploader("Upload student answer(s)", type=["pdf", "jpg", "jpeg", "png"], key="student_answer_file", accept_multiple_files=True)
        marking_scheme_files = st.file_uploader("Upload marking scheme(s) (optional)", type=["pdf", "jpg", "jpeg", "png", "json"], key="marking_scheme_file", accept_multiple_files=True)
        
        if st.button("Next Step"):
            if not student_answer_files or len(student_answer_files) == 0:
                st.warning("Please upload at least one student answer file.")
            else:
                st.session_state.question_files = question_files
                st.session_state.student_answer_files = student_answer_files
                st.session_state.marking_scheme_files = marking_scheme_files
                st.session_state.ai_correction_step = 2
                st.rerun()
    
    elif st.session_state.ai_correction_step == 2:
        # 获取会话中存储的文件
        question_files = st.session_state.get("question_files", [])
        student_answer_files = st.session_state.get("student_answer_files", [])
        marking_scheme_files = st.session_state.get("marking_scheme_files", [])
        
        # 检查是否有必需的文件
        if not student_answer_files or len(student_answer_files) == 0:
            st.error("No student answer files found. Please go back and upload.")
            if st.button("Back to Upload"):
                st.session_state.ai_correction_step = 1
                st.rerun()
            return
        
        st.header("Step 2: Process")

    # 添加批改严格程度选择
    st.markdown('<div style="padding: 10px; border-radius: 5px; background-color: #ffffff; box-shadow: 0 2px 5px rgba(0,0,0,0.1); margin-top: 20px;">', unsafe_allow_html=True)
    st.markdown('<div style="font-size: 1em; font-weight: bold; margin-bottom: 10px; color: #333;">Correction Settings</div>', unsafe_allow_html=True)
    
        # 严格程度选择器 - 放在单独的容器内
        st.markdown('<div style="padding: 15px; border-radius: 5px; background-color: #f8f9fb; margin-bottom: 20px;">', unsafe_allow_html=True)
        st.markdown('<div style="font-size: 0.95em; font-weight: bold; margin-bottom: 15px; color: #444;">Grading Strictness</div>', unsafe_allow_html=True)
        
    strictness_options = {
        "宽松": "Lenient - Focus on major concepts, be forgiving of minor errors",
        "中等": "Moderate - Balance between strictness and leniency (Default)",
        "严格": "Strict - Rigorous grading with detailed error analysis"
    }
        
    strictness_level = st.select_slider(
            "",  # 移除滑块自身的标签以避免重叠
        options=list(strictness_options.keys()),
        value="中等",
        format_func=lambda x: strictness_options[x]
    )
        
        # 显示所选选项以增加清晰度
        st.markdown(f'<div style="margin-top: 8px; font-size: 0.85em; color: #666;">Selected: <b>{strictness_level}</b> - {strictness_options[strictness_level]}</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)  # 关闭严格程度容器
        
        # 语言选择器 - 放在单独的容器内
        st.markdown('<div style="padding: 15px; border-radius: 5px; background-color: #f8f9fb;">', unsafe_allow_html=True)
        st.markdown('<div style="font-size: 0.95em; font-weight: bold; margin-bottom: 15px; color: #444;">Output Language</div>', unsafe_allow_html=True)
        
        language_options = {
            "zh": "Chinese (中文)",
            "en": "English"
        }
        
        language = st.selectbox(
            "",  # 移除下拉菜单自身的标签
            options=list(language_options.keys()),
            format_func=lambda x: language_options[x],
            index=0
        )
        
        # 显示所选语言以增加清晰度
        st.markdown(f'<div style="margin-top: 8px; font-size: 0.85em; color: #666;">Selected: <b>{language_options[language]}</b></div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)  # 关闭语言选择器容器
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # 提交按钮区域，增加醒目程度
        col1, col2 = st.columns([1, 3])
        with col1:
            if st.button("Back", use_container_width=True):
                st.session_state.ai_correction_step = 1
                st.rerun()
        with col2:
    process_button = st.button("📝 Process Correction", type="primary", use_container_width=True)

        # 检查是否点击了处理按钮
    if process_button:
            # 保存设置到会话状态
            st.session_state.strictness_level = strictness_level
            st.session_state.language = language
            st.session_state.ai_correction_step = 3
            st.rerun()
    
    elif st.session_state.ai_correction_step == 3:
        st.header("Step 3: Results")
        
        # 获取所有必要的数据
        question_files = st.session_state.get("question_files", [])
        student_answer_files = st.session_state.get("student_answer_files", [])
        marking_scheme_files = st.session_state.get("marking_scheme_files", [])
        strictness_level = st.session_state.get("strictness_level", "中等")
        language = st.session_state.get("language", "zh")
        
        # 创建用户目录
        user_dir = UPLOAD_DIR / st.session_state.current_user
        user_dir.mkdir(exist_ok=True)
        
        # 读取用户数据
        user_data = read_user_data()
        
        # 始终显示已上传文件的预览，无论生成结果的状态如何
        if student_answer_files or question_files or marking_scheme_files:
            st.subheader("Uploaded Files Preview")
            cols = st.columns(3)
            
            with cols[0]:
                if question_files:
                    st.write("Question Files:")
                    for q in question_files:
                        try:
                            st.image(q, caption=q.name, width=200)
                        except:
                            st.info(f"Preview not available: {q.name}")
            
            with cols[1]:
                if student_answer_files:
                    st.write("Student Answer Files:")
                    for sa in student_answer_files:
                        try:
                            st.image(sa, caption=sa.name, width=200)
                        except:
                            st.info(f"Preview not available: {sa.name}")
            
            with cols[2]:
                if marking_scheme_files:
                    st.write("Marking Scheme Files:")
                    for ms in marking_scheme_files:
                        try:
                            st.image(ms, caption=ms.name, width=200)
                        except:
                            st.info(f"Preview not available: {ms.name}")
            
            # 显示处理中的消息和动画
        if 'correction_success' not in st.session_state:
            with st.spinner("AI analyzing student answer. This may take a moment..."):
                # 保存上传的文件（如果存在）
                user_files = {}
                
                if question_files:
                    for i, question in enumerate(question_files):
                        question_path = save_uploaded_file(user_dir, question, f"question_{i+1}", user_data)
                        user_files[f"question_{i+1}"] = {"filename": question.name, "saved_path": str(question_path)}
                
                if student_answer_files:
                    for i, student_answer in enumerate(student_answer_files):
                        student_answer_path = save_uploaded_file(user_dir, student_answer, f"student_answer_{i+1}", user_data)
                        user_files[f"student_answer_{i+1}"] = {"filename": student_answer.name, "saved_path": str(student_answer_path)}
                
                if marking_scheme_files:
                    for i, marking_scheme in enumerate(marking_scheme_files):
                        marking_scheme_path = save_uploaded_file(user_dir, marking_scheme, f"marking_scheme_{i+1}", user_data)
                        user_files[f"marking_scheme_{i+1}"] = {"filename": marking_scheme.name, "saved_path": str(marking_scheme_path)}
                
                try:
                    # 创建图像文件列表
                    image_files = []
                    if question_files:
                        image_files.extend(question_files)
                        for q in question_files:
                            q.seek(0)  # 重置文件指针
                    
                    if student_answer_files:
                        image_files.extend(student_answer_files)
                        for sa in student_answer_files:
                            sa.seek(0)  # 重置文件指针
                    
                    if marking_scheme_files:
                        image_files.extend(marking_scheme_files)
                        for ms in marking_scheme_files:
                            ms.seek(0)  # 重置文件指针
                    
                    logging.info(f"Preparing to call API with {len(image_files)} files and strictness level: {strictness_level}, language: {language}")
                    
                    # 确保语言参数有效
                    if language not in ["zh", "en"]:
                        language = "zh"
                        logging.warning(f"Invalid language parameter: {language}, defaulting to 'zh'")
                    
                    # 调用API进行批改
                    api_result = correction_with_image_marking_scheme(
                        *image_files, 
                        strictness_level=strictness_level,
                        language=language
                    )
                    
                    if api_result and isinstance(api_result, str):
                        # 保存结果到会话状态
                        st.session_state.correction_success = True
                        st.session_state.correction_result = api_result
                        
                        # 保存 user_files 到会话状态
                        st.session_state.user_files = user_files
                        
                        # 保存结果到用户记录
                        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        correction_record = {
                            "timestamp": timestamp,
                            "content": api_result,
                            "files": user_files,
                            "settings": {
                                "strictness_level": strictness_level,
                                "language": language
                            }
                        }
                        
                        user_data[st.session_state.current_user]["records"].append(correction_record)
                        save_user_data(user_data)
                    else:
                        st.session_state.correction_success = False
                        st.session_state.correction_error = "API returned an invalid result"
                except Exception as e:
                    st.session_state.correction_success = False
                    st.session_state.correction_error = str(e)
                    logging.error(f"Correction processing error: {str(e)}")
    
        # 显示结果
    if hasattr(st.session_state, 'correction_success') and st.session_state.correction_success:
            st.success("✅ Correction processed successfully!")
            
        st.markdown('<div style="background-color: #f8f9fa; border-radius: 10px; padding: 20px; margin-bottom: 30px;">', unsafe_allow_html=True)
        st.markdown('<div style="font-size: 1.1em; font-weight: bold; color: #333; margin-bottom: 15px;">Correction Results</div>', unsafe_allow_html=True)
        
        # 增强结果显示区域
        st.markdown('<div style="background-color: white; border-radius: 5px; padding: 20px; border-left: 5px solid #5cb85c; box-shadow: 0 2px 5px rgba(0,0,0,0.1);">', unsafe_allow_html=True)
        
        # 优化结果的显示方式，替换纯文本为格式化内容
        result_text = st.session_state.correction_result
        
        # 首先处理主要的标题格式
        result_text = re.sub(r'# (.*?)(\n|$)', r'<div style="font-weight: bold; font-size: 1.1em; color: #333; margin: 10px 0 5px 0; border-bottom: 1px solid #eee; padding-bottom: 5px;">\1</div>', result_text)
        result_text = re.sub(r'## (.*?)(\n|$)', r'<div style="font-weight: bold; font-size: 1em; color: #444; margin: 8px 0 4px 0;">\1</div>', result_text)
        result_text = re.sub(r'### (.*?)(\n|$)', r'<div style="font-weight: bold; font-size: 0.95em; color: #555; margin: 6px 0 3px 0;">\1</div>', result_text)
        
        # 处理其他特定标题格式
        result_text = re.sub(r'学生答案批改如下:', r'<div style="font-weight: bold; font-size: 1em; color: #333;">学生答案批改如下:</div>', result_text)
        
        # 处理分数显示
        result_text = re.sub(r'总分：(\d+)/(\d+)', r'<div style="font-size: 0.95em; margin: 5px 0;">总分：<span style="font-weight: bold; color: #5cb85c;">\1</span>/\2</div>', result_text)
        result_text = re.sub(r'(\d+)\s*\([Ii]\)', r'<div style="font-size: 1em; font-weight: bold; color: #5cb85c; margin: 8px 0;">\1 分</div>', result_text)
        
        # 处理步骤评分
        result_text = re.sub(r'(\d+)\. 第\d+步：(.*?) - (\d+)/(\d+)', r'<div style="font-size: 0.95em; margin: 10px 0 5px 0;"><span style="font-weight: bold;">\1. 第\1步：\2</span> - <span style="color: #5cb85c; font-weight: bold;">\3</span>/\4</div>', result_text)
        
        # 处理正确和错误点
        result_text = re.sub(r'- ✓ 正确点：(.*?)(\n|$)', r'<div style="color: #5cb85c; margin-left: 20px; font-size: 0.9em;">✓ 正确点：\1</div>', result_text)
        result_text = re.sub(r'- ✗ 错误点：(.*?)(\n|$)', r'<div style="color: #d9534f; margin-left: 20px; font-size: 0.9em;">✗ 错误点：\1</div>', result_text)
        result_text = re.sub(r'- 扣分原因：(.*?)(\n|$)', r'<div style="color: #777; margin-left: 20px; font-size: 0.9em;">🔍 扣分原因：\1</div>', result_text)
        
        # 科目和题型信息
        result_text = re.sub(r'- 科目：(.*?)(\n|$)', r'<div style="font-size: 0.9em; margin: 3px 0;">📚 科目：<span style="color: #333;">\1</span></div>', result_text)
        result_text = re.sub(r'- 题目类型：(.*?)(\n|$)', r'<div style="font-size: 0.9em; margin: 3px 0;">📝 题目类型：<span style="color: #333;">\1</span></div>', result_text)
        
        # 处理一般列表项
        lines = result_text.split('\n')
        formatted_lines = []
        for line in lines:
            # 跳过已经处理过的行
            if '<div' in line:
                formatted_lines.append(line)
                continue
                
            # 处理列表项
            if line.strip().startswith('-') or line.strip().startswith('•'):
                line = f'<div style="margin-left: 15px; font-size: 0.9em;">{line}</div>'
            # 处理缩进的数学公式
            elif line.strip().startswith('∴') or line.strip().startswith('∵'):
                line = f'<div style="margin-left: 15px; font-family: monospace; font-size: 0.9em;">{line}</div>'
            # 处理普通文本
            elif line.strip():
                line = f'<div style="font-size: 0.9em; line-height: 1.4; margin: 3px 0;">{line}</div>'
            else:
                line = '<div style="height: 8px;"></div>'  # 空行
            formatted_lines.append(line)
        
        result_text = ''.join(formatted_lines)
        
        # 应用一致的基础字体大小和行高
        result_text = f'<div style="font-size: 14px; line-height: 1.4;">{result_text}</div>'
        
        st.markdown(result_text, unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        # 提供下载选项
        st.markdown('<div style="font-size: 1em; font-weight: bold; color: #333; margin: 20px 0 15px 0;">Download Options</div>', unsafe_allow_html=True)
        
            # 使用统一的下载选项函数，传递用户文件
            user_files_from_session = st.session_state.get('user_files', {})
            create_download_options(st.session_state.correction_result, "correction_result", user_files_from_session)
            
            st.markdown('</div>', unsafe_allow_html=True)  # 关闭结果区域容器
            
        elif hasattr(st.session_state, 'correction_success') and not st.session_state.correction_success:
            error_message = getattr(st.session_state, 'correction_error', "Unknown error occurred")
            st.error(f"❌ Failed to process correction: {error_message}")
            
            # 提供更多具体的错误指导
            if "timeout" in error_message.lower() or "connection" in error_message.lower():
                st.info("Failed to connect to API server. Please check your network connection and try again later.")
            elif "api key" in error_message.lower():
                st.info("API key issue. Please contact administrator to check API settings.")
            elif "'NoneType' object has no attribute" in error_message:
                st.info("There was an issue processing one of the uploaded files. Please ensure your files are valid images or PDFs.")
            elif "Failed to read uploaded file" in error_message:
                st.info("Unable to read one of the uploaded files. Please ensure your files are not corrupted.")
        
        # 添加操作按钮
        col1, col2 = st.columns(2)
        with col1:
            if st.button("🔄 Start New Correction", use_container_width=True):
                # 清除结果和错误
                if 'correction_success' in st.session_state:
                    del st.session_state.correction_success
                if 'correction_result' in st.session_state:
                    del st.session_state.correction_result
                if 'correction_error' in st.session_state:
                    del st.session_state.correction_error
                # 返回第一步
                st.session_state.ai_correction_step = 1
                st.rerun()
        
        with col2:
            if st.button("⚙️ Adjust Settings", use_container_width=True):
                # 保留上传的文件但回到设置页面
                st.session_state.ai_correction_step = 2
                # 清除结果但不清除上传的文件
                if 'correction_success' in st.session_state:
                    del st.session_state.correction_success
                if 'correction_result' in st.session_state:
                    del st.session_state.correction_result
                if 'correction_error' in st.session_state:
                    del st.session_state.correction_error
                st.rerun()

    # 添加页脚
    st.markdown("""
    <div style="text-align: center; margin-top: 30px; padding-top: 15px; border-top: 1px solid #eee; color: #666; font-size: 0.8em;">
        AI Guru Correction System • Powered by advanced AI • © 2025
    </div>
    """, unsafe_allow_html=True)

# 新增辅助函数用于保存上传的文件
def save_uploaded_file(user_dir, uploaded_file, file_type, user_data):
    """
    保存上传的文件并更新用户记录
    
    参数:
    user_dir: Path对象，用户目录路径
    uploaded_file: UploadedFile对象，上传的文件
    file_type: str，文件类型
    user_data: dict，用户数据字典
    
    返回:
    Path对象，保存的文件路径
    """
    file_path = user_dir / uploaded_file.name
    with open(file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    
    # 更新用户记录 你
    file_size = uploaded_file.size / 1024
    record = {
        "filename": uploaded_file.name,
        "upload_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "file_size": round(file_size, 2),
        "file_type": file_type,
        "processing_result": "Uploaded"
    }
    
    if st.session_state.current_user in user_data:
        user_data[st.session_state.current_user]["records"].append(record)
        save_user_data(user_data)
    
    return file_path

# 添加密码哈希函数
def hash_password(password):
    """对密码进行安全哈希处理"""
    return hashlib.sha256(password.encode()).hexdigest()

# 修改主函数添加注册功能
def main():
    # 初始化会话状态 - 确保在应用启动时正确初始化所有需要的状态变量
    if 'logged_in' not in st.session_state:
        st.session_state.logged_in = False
    if 'current_user' not in st.session_state:
        st.session_state.current_user = None
    if 'page' not in st.session_state:
        st.session_state.page = 'main_menu'
    if 'show_register' not in st.session_state:
        st.session_state.show_register = False
    if 'ai_correction_step' not in st.session_state:
        st.session_state.ai_correction_step = 1
    if 'previous_page' not in st.session_state:
        st.session_state.previous_page = 'main_menu'
    if 'show_login_modal' not in st.session_state:
        st.session_state.show_login_modal = False

    # 打印当前页面状态，用于调试
    logging.info(f"Current page: {st.session_state.page}")
    if st.session_state.page == "ai_correction":
        logging.info(f"Current AI correction step: {st.session_state.ai_correction_step}")

    # 侧边栏导航(始终显示，但登录状态不同会有不同选项)
        with st.sidebar:
            st.title("🎓 AI Guru")
        
        if st.session_state.logged_in:
            st.write(f"Welcome, {st.session_state.current_user}!")
            
            # 登录后的导航菜单
            st.subheader("📍 Navigation")
            menu_options = {
                "main_menu": "🏠 Main Menu",
                "file_management": "📁 File Management",
                "ai_correction": "🤖 AI Correction",
                "account_management": "👤 Account Management"
            }
            
            # 根据当前页面设置默认选择
            current_page_key = st.session_state.page
            current_page_value = menu_options.get(current_page_key, menu_options["main_menu"])
            
            # 记录导航选择之前的页面
            st.session_state.previous_page = current_page_key
            
            # 使用回调函数实现选择选项后立即导航
            def on_page_change():
                selected_option = st.session_state.page_selector
                page_key = list(menu_options.keys())[list(menu_options.values()).index(selected_option)]
                
                # 只有在页面真正变化时才更新和重新加载
                if page_key != st.session_state.previous_page:
                    st.session_state.page = page_key
                    # 如果切换到AI批改页面，重置步骤
                    if page_key == "ai_correction":
                        st.session_state.ai_correction_step = 1
                    st.rerun()
            
            # 使用key参数和on_change回调来跟踪选择变化
            selected_page = st.radio(
                "Go to:", 
                list(menu_options.values()), 
                index=list(menu_options.values()).index(current_page_value),
                key="page_selector",
                on_change=on_page_change
            )
            
            if st.button("🚪 Logout"):
                st.session_state.logged_in = False
                st.session_state.current_user = None
                st.session_state.page = "main_menu"
                st.rerun()
        else:
            # 未登录状态下的导航菜单
            st.subheader("📍 Navigation")
            menu_options = {
                "main_menu": "🏠 Main Menu"
            }
            
            # 根据当前页面设置默认选择
            current_page_key = st.session_state.page
            current_page_value = menu_options.get(current_page_key, menu_options["main_menu"])
            
            # 使用简单版本的导航，只有主菜单选项
            selected_page = st.radio(
                "Go to:", 
                list(menu_options.values()), 
                index=0,
                key="simple_page_selector"
            )
            
            # 登录/注册按钮
            if st.button("🔐 Login / Register", type="primary", use_container_width=True):
                st.session_state.show_login_modal = True
                st.rerun()

    # 登录弹窗
    if st.session_state.show_login_modal:
        show_login_modal()

    # 页面路由
    if st.session_state.page == "file_management":
    if not st.session_state.logged_in:
            # 如果未登录，提示需要登录并设置显示登录弹窗
            st.warning("请先登录以使用文件管理功能")
            if st.button("登录", key="file_management_login_button"):
                st.session_state.show_login_modal = True
                st.rerun()
        else:
            file_management_page()
    elif st.session_state.page == "ai_correction":
        if not st.session_state.logged_in:
            # 如果未登录，提示需要登录并设置显示登录弹窗
            st.warning("请先登录以使用AI批改功能")
            if st.button("登录", key="ai_correction_login_button"):
                st.session_state.show_login_modal = True
                st.rerun()
        else:
            ai_correction_page()
    elif st.session_state.page == "account_management":
        if not st.session_state.logged_in:
            # 如果未登录，提示需要登录并设置显示登录弹窗
            st.warning("请先登录以访问账户管理页面")
            if st.button("登录", key="account_management_login_button"):
                st.session_state.show_login_modal = True
                st.rerun()
        else:
            account_management_page()
    else:  # main menu
        main_page()

def show_login_modal():
    """显示登录弹窗"""
    # 使用container创建一个模拟的弹窗效果
    with st.container():
        st.markdown("""
        <style>
        .login-modal {
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            margin: 10px 0;
            border: 1px solid #eee;
        }
        </style>
        <div class="login-modal">
            <h3 style="text-align: center; color: #333;">🔐 用户登录/注册</h3>
        </div>
        """, unsafe_allow_html=True)
        
        # 切换登录/注册按钮
        col1, col2 = st.columns(2)
        with col1:
            if st.button("Login", use_container_width=True, 
                         type="primary" if not st.session_state.show_register else "secondary"):
                st.session_state.show_register = False
        with col2:
            if st.button("Register", use_container_width=True,
                         type="primary" if st.session_state.show_register else "secondary"):
                st.session_state.show_register = True
        
        # 取消按钮
        if st.button("✖ 关闭", key="close_login_modal"):
            st.session_state.show_login_modal = False
            st.rerun()
        
        # 根据状态显示登录或注册表单
        if st.session_state.show_register:
            # 注册表单
            with st.form("register_form"):
                st.subheader("📝 Create New Account")
                new_username = st.text_input("Username")
                new_password = st.text_input("Password", type="password")
                confirm_password = st.text_input("Confirm Password", type="password")
                email = st.text_input("Email (optional)")
                
                register_submitted = st.form_submit_button("Register")
                
                if register_submitted:
                    # 进行表单验证
                    if not new_username or not new_password:
                        st.error("Username and password are required.")
                    elif new_password != confirm_password:
                        st.error("Passwords do not match.")
                    else:
                        # 检查用户名是否已存在
                        user_data = read_user_data()
                        if new_username in user_data:
                            st.error("Username already exists. Please choose another one.")
                        else:
                            # 创建新用户
                            user_data[new_username] = {
                                "password": hash_password(new_password),
                                "email": email,
                                "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                                "records": []
                            }
                            save_user_data(user_data)
                            
                            # 提示成功并自动设置为登录状态
                            st.success("Registration successful! You can now log in.")
                            st.session_state.show_register = False
                            st.rerun()
        else:
            # 登录表单
            with st.form("login_form"):
                st.subheader("👤 Login to Your Account")
                username = st.text_input("Username")
                password = st.text_input("Password", type="password")
                login_submitted = st.form_submit_button("Login")
                
                if login_submitted:
                    if not username or not password:
                        st.error("Please enter both username and password.")
                    else:
                        # 检查测试账户
                        if username in TEST_ACCOUNTS and TEST_ACCOUNTS[username]['password'] == password:
                            st.session_state.logged_in = True
                            st.session_state.current_user = username
                            st.session_state.show_login_modal = False
                            st.success("Login successful!")
                            st.rerun()
                        else:
                            # 检查注册用户
                            user_data = read_user_data()
                            if username in user_data and user_data[username].get('password') == hash_password(password):
                                st.session_state.logged_in = True
                                st.session_state.current_user = username
                                st.session_state.show_login_modal = False
                                st.success("Login successful!")
                                st.rerun()
                            else:
                                st.error("Invalid username or password.")
        
        # 添加一个忘记密码的链接（可以在将来实现）
        st.markdown("---")
        st.markdown("<div style='text-align: center'>Forgot your password? Contact administrator.</div>", unsafe_allow_html=True)

def account_management_page():
    """用户账户管理页面"""
    st.title("👤 Account Management")
    
    if not st.session_state.logged_in:
        st.warning("Please log in to access account management features.")
        return
    
    # 获取用户数据
        user_data = read_user_data()
    current_user_data = user_data.get(st.session_state.current_user, {})
    
    # 分栏显示用户信息和账户操作
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.subheader("Account Information")
        st.markdown(f"""
        **Username**: {st.session_state.current_user}
        
        **Email**: {current_user_data.get('email', 'Not provided')}
        
        **Created**: {current_user_data.get('created_at', 'Unknown')}
        
        **Total Records**: {len(current_user_data.get('records', []))}
        """)
    
    with col2:
        st.subheader("Account Actions")
        
        # 更改密码
        with st.expander("Change Password"):
            with st.form("change_password_form"):
                current_password = st.text_input("Current Password", type="password")
                new_password = st.text_input("New Password", type="password")
                confirm_new_password = st.text_input("Confirm New Password", type="password")
                
                change_submitted = st.form_submit_button("Update Password")
                
                if change_submitted:
                    if not current_password or not new_password or not confirm_new_password:
                        st.error("All fields are required.")
                    elif new_password != confirm_new_password:
                        st.error("New passwords do not match.")
                    else:
                        # 验证当前密码
                        if st.session_state.current_user in TEST_ACCOUNTS:
                            # 测试账户密码验证
                            if current_password != TEST_ACCOUNTS[st.session_state.current_user]['password']:
                                st.error("Current password is incorrect.")
                            else:
                                st.warning("Cannot change password for test accounts.")
                        else:
                            # 注册用户密码验证
                            if current_user_data.get('password') != hash_password(current_password):
                                st.error("Current password is incorrect.")
                            else:
                                # 更新密码
                                user_data[st.session_state.current_user]['password'] = hash_password(new_password)
                                save_user_data(user_data)
                                st.success("Password updated successfully!")
        
        # 更新电子邮箱
        with st.expander("Update Email"):
            with st.form("update_email_form"):
                current_email = current_user_data.get('email', '')
                st.write(f"Current email: {current_email if current_email else 'Not set'}")
                
                new_email = st.text_input("New Email Address")
                update_email_submitted = st.form_submit_button("Update Email")
                
                if update_email_submitted:
                    if not new_email:
                        st.error("Please enter a new email address.")
                    else:
                        # 更新邮箱
                        user_data[st.session_state.current_user]['email'] = new_email
                        save_user_data(user_data)
                        st.success("Email updated successfully!")
        
        # 清除历史记录选项
        with st.expander("Manage History"):
            st.write("Your correction history records:")
            
            records = current_user_data.get('records', [])
            filtered_records = [r for r in records if r.get('content')]
            
            if not filtered_records:
                st.info("No correction records found.")
            else:
                st.write(f"You have {len(filtered_records)} correction records.")
                
                if st.button("Clear All Correction History", type="primary"):
                    # 确认对话框
                    if st.checkbox("I understand this action cannot be undone"):
                        # 清除记录
                        user_data[st.session_state.current_user]['records'] = []
                        save_user_data(user_data)
                        st.success("All correction history has been cleared.")
                        st.rerun()

def main_page():
    """Main landing page"""
    # 主页显示网站介绍和功能导航
    st.markdown("""
    <div style="text-align: center; margin-bottom: 30px;">
        <h1>
            <span style="font-size: 48px; color: #FF4B4B;">AI</span> 
            <span style="font-size: 42px; color: #444;">Guru</span>
        </h1>
        <p style="font-size: 18px; color: #666; margin-top: -10px;">智能批改系统 | 提升评分效率和准确性</p>
    </div>
    """, unsafe_allow_html=True)
    
    # 网站介绍
    st.markdown("""
    <div style="background-color: #f8f9fa; padding: 20px; border-radius: 10px; margin-bottom: 25px;">
        <h3 style="color: #444; margin-bottom: 15px;">🔍 关于 AI Guru</h3>
        <p style="color: #555;">
            AI Guru 是一款针对教育领域的智能批改助手，利用先进的人工智能技术，帮助教师和教育工作者快速、准确地批改学生作业。
            系统支持中英双语，能够根据评分标准对学生答案进行全面分析，提供详细的评分报告和改进建议。
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # 创建两栏布局
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div style="background-color: #e6f3ff; padding: 20px; border-radius: 10px; height: 100%;">
            <h3 style="color: #0066cc; margin-bottom: 15px;">📚 快速上手</h3>
            <ol style="color: #444; padding-left: 20px;">
                <li><b>上传文件</b> - 提供题目、学生答案和评分标准</li>
                <li><b>选择语言</b> - 中文或英文评分反馈</li>
                <li><b>调整严格程度</b> - 根据需求设置评分严格度</li>
                <li><b>获取评分</b> - AI将提供详细分析和评分结果</li>
                <li><b>导出结果</b> - 将结果保存为PDF、Word或文本格式</li>
            </ol>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div style="background-color: #f0f7f0; padding: 20px; border-radius: 10px; height: 100%;">
            <h3 style="color: #2e8b57; margin-bottom: 15px;">✨ 功能特点</h3>
            <ul style="color: #444; padding-left: 20px;">
                <li><b>双语支持</b> - 中英文智能评分与反馈</li>
                <li><b>多文件处理</b> - 批量处理多个学生答案</li>
                <li><b>灵活评分</b> - 可调整评分严格程度</li>
                <li><b>详细分析</b> - 提供全面的答案分析</li>
                <li><b>格式多样</b> - 支持多种导出格式</li>
                <li><b>历史记录</b> - 保存评分历史，方便查阅</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    # 添加间距
    st.markdown("<br>", unsafe_allow_html=True)
    
    # 添加快捷导航按钮
    st.markdown("""
    <h3 style="color: #444; margin-bottom: 15px; text-align: center;">🚀 快速开始</h3>
    """, unsafe_allow_html=True)
    
    # 添加调试信息
    logging.info("显示主菜单导航按钮")
    
    # 三栏布局用于按钮
    btn_col1, btn_col2, btn_col3 = st.columns(3)
    
    with btn_col1:
        if st.button("🖊️ 开始批改", 
                    use_container_width=True,
                    type="primary"):
            logging.info("点击了 开始批改 按钮")
            # 如果未登录，设置显示登录弹窗
            if not st.session_state.logged_in:
                st.session_state.show_login_modal = True
                st.rerun()
            else:
                # 已登录，可以直接导航
                st.session_state["page"] = "ai_correction"
                st.session_state["ai_correction_step"] = 1
                st.rerun()
    
    with btn_col2:
        if st.button("📂 管理文件", 
                    use_container_width=True):
            logging.info("点击了 管理文件 按钮")
            # 如果未登录，设置显示登录弹窗
            if not st.session_state.logged_in:
                st.session_state.show_login_modal = True
                st.rerun()
            else:
                # 已登录，可以直接导航
                st.session_state["page"] = "file_management"
                st.rerun()
    
    with btn_col3:
        if st.button("👤 账户管理", 
                    use_container_width=True):
            logging.info("点击了 账户管理 按钮")
            # 如果未登录，设置显示登录弹窗
            if not st.session_state.logged_in:
                st.session_state.show_login_modal = True
                st.rerun()
            else:
                # 已登录，可以直接导航
                st.session_state["page"] = "account_management"
                st.rerun()
    
    # 添加页脚
    st.markdown("<br><br>", unsafe_allow_html=True)
    st.markdown("""
    <div style="text-align: center; color: #888; font-size: 14px; margin-top: 50px;">
        <p>AI Guru © 2023 | 智能批改系统</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()